#!/usr/bin/env python3

import sys
import re
import yaml
from urllib.parse import urlparse
import urllib3
import argparse
from colors import red, green, yellow, blue, faint, bold

parser = argparse.ArgumentParser()
parser.add_argument("filename")
args = parser.parse_args()

product_pattern = re.compile('^[A-z_0-9]+$')


def print_good(s, *args):
    # ansicolor assumes the first argument is a string
    print(green(str(s), *args))


def print_bad(s, *args):
    # ansicolor assumes the first argument is a string
    print(red(str(s), *args))


def check_product(pkg):
    print(faint(('%16s: ' % 'product name')), end='')
    try:
        validate_string(pkg)
        validate_product_name(pkg)
    except ValueError as e:
        print_bad(e)
        return False

    print_good('OK')
    return True


def check_repo_spec(spec):
    print(faint(('%16s: ' % 'repo spec')), end='')

    try:
        if type(spec) is str:
            validate_repo_url(spec)
        elif type(spec) is dict:
            validate_repo_dict(spec)
        else:
            raise ValueError('unsupported repo spec type: %s' % type(spec))
    except Exception as e:
        print_bad(e)
        return False

    print_good('OK')
    return True


def validate_string(s):
    # intentionally disallowing subclasses of str since serialized objects
    # should not be in our configuration file.
    if not type(s) is str:
        raise ValueError('is not a str')


def validate_bool(b):
    # intentionally disallowing subclasses of bool since serialized objects
    # should not be in our configuration file.
    if not type(b) is bool:
        raise ValueError('is not a bool')


def validate_product_name(pkg):
    if not product_pattern.match(pkg):
        raise ValueError('invalid EUPS product name')


def validate_repo_dict(spec):
    mandatory_keys = ['url']
    optional_keys = ['ref', 'lfs']

    if 'url' in spec:
        validate_repo_url(spec['url'])
    if 'ref' in spec:
        validate_string(spec['ref'])
    if 'lfs' in spec:
        validate_bool(spec['lfs'])
        if spec['lfs'] is not True:
            raise ValueError('the only supported value for lfs is true')

    # missing mandatory keys
    missing_keys = [key for key in mandatory_keys if key not in spec]

    # extra keys
    unknown_keys = [key for key in spec
                    if key not in (mandatory_keys + optional_keys)]

    # at least one optional key is required; this is to prevent url only
    # hashes which could be simplified
    no_options = not any(key for key in optional_keys if key in spec)

    if no_options or missing_keys or unknown_keys:
        message = ""
        for k in missing_keys:
            message += "missing mandatory key: %s\n" % k
        for k in unknown_keys:
            message += "unknown key: %s\n" % k
        if no_options:
            message += "at least one of these keys is required: %s\n" \
                    % optional_keys

        raise ValueError(message)

http = urllib3.PoolManager()

def validate_repo_url(repo):
    validate_string(repo)
    url = urlparse(repo)

    if url.scheme == 'https':
        r = http.request('GET', repo)
        if r.status != 200:
            raise ValueError('invalid url: %d' % r.status)
    else:
        raise ValueError('unsupported scheme: %s' % url.scheme)


repos = 0
problemos = 0

print('repos')
print('===')
print()

with open(args.filename, 'r') as f:
    data = yaml.safe_load(f)
    # intentionally disallowing subclasses of dict since serialized objects
    # should not be in our configuration file.
    if not type(data) is dict:
        print_bad('YAML file has an invalid format: must be a Mapping')
        sys.exit(1)
    for k, v in data.items():
        repos += 1

        print('%s: %s' % (bold(k), blue(str(v), style='bold')))
        if not check_product(k):
            problemos += 1
        if not check_repo_spec(v):
            problemos += 1

print()
print('summary')
print('===')
print(yellow('%16s: %d' % ('total repos', repos)))
print(yellow('%16s: %d' % ('errors', problemos)))

if problemos > 0:
    sys.exit(1)
